sort1 uses: Bubble Sort

random50000 - real 5.839s
reversed50000 - real 4.965s
sorted50000 -real 0.484s

How do you know?: Based on the test results and by process of elimination, I identify it as Bubble Sort.
Its time performance varies with the file's initial state, being as fast as Merge Sort for a sorted file but much slower for a random one.
This inconsistency aligns with the algorithm's inherent behavior.

sort2 uses: Merge Sort

random50000 - real 0.406s
reversed50000 - real 0.443s
sorted50000 -real 0.486s

How do you know?: As stated by the test results, I identify it as Merge Sort due to its method of dividing the file into smaller groups,
sorting each, and merging them back. This yields quick and consistent time performance, irrespective of the file's initial state.


sort3 uses: Selection Sort.

random50000 - real 2.222
reversed50000 - real 2.256
sorted50000 -real 2.256

How do you know?: As indicated by the test results, I identify it as Selection Sort due to its consistent yet slower time
performance compared to Merge Sort. The even timings across test runs align with the algorithm's inherent behavior.
